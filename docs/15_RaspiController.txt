
https://www.qoosky.io/help#websocket-api-qoosky-cloud-%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9-%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9

利用手順
API トークンの発行
アカウント作成後、個人設定ページにある WebSocket API にアクセスして「新規トークン発行」ボタンを押します。発行されたことを確認したら「起動」ボタンを押します。


コントローラの操作方法

API サーバーからの通知がコントローラの下部に表示されます。同じメッセージを連続して複数回受信した場合はその回数が括弧内に表示されます。起動中のコントローラに対応する API トークンはアドレスバーで確認できます。コントローラには操作ボタンが 8 つあります。タップ操作するとボタンに応じたメッセージがデバイスに 1 回通知されます。長押しすると 0.5 秒間隔で継続的に通知されます。

Raspberry Pi の接続方法
-----------------------

任意のプログラミング言語で記述された WebSocket クライアントを Qoosky API サーバーに接続して、token をキーに含む JSON 文字列で API トークンを送信してください。

{"token":"XXXX-XXXX-XXXX-XXXX"}
以下は簡単なサンプルクライアントです。お気付きの点がございましたら、適宜 Pull requests をお願いします。

Python (ws, wss 対応。プロキシ設定可)
Ruby (ws, wss 対応)
JavaScript (ws, wss 対応)
Java (ws のみ)
Scala (ws のみ)
エンドポイントは以下のとおりです。

ws://api.qoosky.io/v1/controller/actuator/ws
wss://api.qoosky.io/v1/controller/actuator/ws


コントローラのボタン番号

右側の無印ボタンと左側の矢印ボタンには、それぞれ↑←→↓の順に連番が割り当てられています。



仕組み

API 利用時のイメージがつかみやすくなるため、簡略化したサーバー構成を記載します。



前述の利用手順で「起動」ボタンを押すと Web ブラウザに JavaScript アプリケーションがダウンロードされます (図1-3)
ダウンロードが完了すると自動的に API サーバーとの WebSocket コネクションを確立します (図4-5)
Raspberry Pi 等に API トークンを設定して API サーバーとの WebSocket コネクションを確立します (図6-7)
API サーバーは提供された API トークンに応じて適切な Web ブラウザと Raspberry Pi の組を識別します。
API サーバーに通知されたメッセージは対応する相手に双方向にプロキシされてリアルタイムに通知されます (図4,6)。
補足

タイムアウト時間

サーバーリソースは有限なため、メッセージのやり取りが 90 秒間なされない組のコネクションはサーバーによって切断されます。Ping/Pong メッセージを打ち続けることで接続を維持できますが、片方のスマートフォンや PC で常にコントローラを起動しておく必要があるため実用的ではありません。Ping/Pong メッセージに加えて、切断時に Raspberry Pi 等のデバイスが自動で再接続するようにしておき、再度スマートフォンや PC でコントローラを起動したときに常にペアリングできる状態にしておくという対応がよさそうです。

平文通信 (ws) と SSL 通信 (wss) の使い分け

自宅に設置されたロボットを操作する場合などは平文通信でよさそうです。

平文通信 (ws) はクライアント実装が容易ですが、社内学内プロキシが WebSocket の独自ヘッダーを無視することがあり接続が確立できない可能性があります。
SSL 通信 (wss) は言語によっては実装が困難ですが、社内学内プロキシは暗号化された通信を通常は解かないため WebSocket 通信が成功しやすくなります。
ルート証明書

SSL 通信時に api.qoosky.io のサーバー証明書を署名した認証局のルート証明書が必要な場合は websocket_clients からダウンロードしてください。

Twitter 連携について

本サイトがあなたの許可なく Twitter に投稿することはありません。