NodeJSインストール
概要

最新バージョンの RASBIAN JESSIE には node v0.10.29 が収容されていますが，現行のものと比べてかなり古いバージョンなのでアンインストールしv5.4.0をインストールします。
nvm(node version manager)を使うとnodeのインストールとバージョンコントロールを極めて簡単に行うことができます。
しかし，nvmの一般的方法でインストールしたnodeは複数ユーザで使う考慮がされてません。
sudo node としてroot権限でnodeを動かそうとしても node: command not found となります。
上の不都合を回避するための環境設定が必要です。

前提
RASBIAN JESSIEがインストールされ正しく動いていること。
インターネットに接続していること。
gitコマンドが有効になっていること。
shell(bash)の操作に，ある程度習熟していること。

gitコマンドの動作を確認します
$ git --version
git version 2.1.4
バージョン番号が帰ってくればgitコマンドは動作します。

node v0.10.29をアンインストールします
$ sudo apt-get autoremove nodejs
nvmをインストールするディレクトリ(/usr/local/nvm)を作成しアトリビュートを変更します
$ sudo mkdir /usr/local/nvm
$ sudo chmod 777 /usr/local/nvm
nvm.gitリポジトリのクローンを作成します
$ git clone https://github.com/creationix/nvm.git /usr/local/nvm
nvmを使えるようにします
$ source /usr/local/nvm/nvm.sh
nodeをインストールします
nvmでインストールできるnodeのバージョン一覧を表示
$ nvm ls-remote
 
v5.4.0をインストール
$ nvm install v5.4.0
node, npm のバージョン表示して動作することを確認します
$ node -v
v5.4.0
 
$ npm -v
3.3.12
ログイン時にnvm,nodeの起動設定を行うようにします
/etc/profile.d/ディレクトリ配下に次の内容のnvm.shを作成します。
$ sudo vi /etc/profile.d/nvm.sh
  または
$ sudo nano /etc/profile.d/nvm.sh
 
次の行を記述して保存
source /usr/local/nvm/nvm.sh
node-v5.4.0 が node コマンドで起動するようにdefaultエイリアスを設定します。

$ nvm alias default v5.4.0
以上の設定でログイン時にnvm.shが実行され node コマンドへの v5.4.0の割り付けとnvm, npmへのパスが設定されます。

sudo node が動くようにします
$ sudo visudo
nanoエディタが起動しsudoの動作定義ファイルが開きます。
 
次の行をコメントアウトします。
#Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin
 
次の行を追加します。
Defaults    env_keep += "PATH"
sudoの動作環境に現在のユーザのコマンド・パスを引き渡す設定です。

NodeでGPIOを動かす

johnny-five他のパッケージをインストールします
johnny-fiveパッケージのインストール
$ npm install johnny-five
raspi-ioパッケージのインストール
$ npm install raspi-io
GPIOの７番ピンに接続したLEDを１秒(1000mS)間隔で点滅させます。
次のコードを記述したソース・ファイルgpio-led7.jsを作成します。

var raspi = require('raspi-io');
var five = require('johnny-five');
var board = new five.Board({
    io: new raspi();
});
board.on('ready', function() {
    var led = new five.led('P1-7');
    led.blink(1000);
});

実行します

$ sudo node gipo-led7.js
1453297162821 Device(s) RaspberryPi-IO 
1453297162907 Connected RaspberryPi-IO 
1453297162937 Repl Initialized 
>>
 
$ node gpio-led7.js
wiringPiSetup: Must be root. (Did you forget sudo?)
Aborted
GPIOを操作するプログラムは sudo で実行しないと動作しません。
----------------------------------------------------------------------------------
Node.jsでshellコマンドを叩く

installerを書いたあたりでshellコマンドを叩いたりしてみたのでちょっとまとめます
shellコマンドを叩くには2種類のAPIが用意されています。1つはexec、もう一つがspawnです。

exec
1回こっきりのコマンドを叩く場合はこちらがいいでしょう。コマンドを文字列で渡してcallbackで受け取るだけです。

$ sh -c '文字列'
みたいな気分で実行できます。

1. まず、shellコマンドを実行するためにはchild_processモジュールをrequireします。
var exec = require('child_process').exec;
2. execは以下のようにして、使います。引数は、「コマンド文字列」「options(省略可)」「callback」です。
callbackに渡されるのは、err、標準出力文字列、標準エラー出力文字列です。
exec('ls -l ./', function(err, stdout, stderr){
  /* some process */
});
3. これだけでいろいろと出来ます。
当然この結果も非同期なので、ここで思いgrep|uniq|sortとかパイプで流したりして、コールバックで受けて、みたいにすると夢が広がったりします。

spawn

なんども叩くやつに向いてます。sarとか、psとか、topとか、lsとか

1. spawnを呼び出す。
var spawn = require('child_process').spawn;
2. 次にコマンドを登録します
var sar = spawn('sar', ['-r']);
sar.stdout.setEncoding('utf8'); // .stdout・.stderrは通常のstreamと同じなのでsetEncodingでbufferじゃなくできます。
sar.stdout.on('data', function(data){
  // some process
});
sar.on('exit', function(){
  process.exit(0);
});
こんな風にすることで、例えば、ずっと受け続けて、正規表現にマッチするのだけ、とか、特定の文字列が出てきたら、とか、ある値以上だったら、とかの処理を書くことができます。fdを監視しているのと同じノリで監視系とか書くのはnode向いてるかもしれません。

